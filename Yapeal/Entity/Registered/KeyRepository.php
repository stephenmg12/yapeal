<?php

namespace Yapeal\Entity\Registered;

use Doctrine\ORM\EntityRepository;

/**
 * KeyRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class KeyRepository extends EntityRepository
{
    /**
     * @return \Yapeal\Entity\Registered\Key[]
     */
    public function getActiveAccountKeyList()
    {
        return $this->getActiveKeyListByType('account');
    }
    /**
     * @param string $type One of account|character|corporation
     *
     * @return array
     * @throws \InvalidArgumentException
     */
    public function getActiveKeyListByType($type)
    {
        $allowedTypes = array('account', 'character', 'corporation');
        if (!in_array($type, $allowedTypes)) {
            $mess = 'Unknown type: ' . $type;
            throw new \InvalidArgumentException($mess);
        }
        $qb = $this->_em->createQueryBuilder();
        $qb
            ->select('k')
            ->from('Yapeal\Entity\Registered\Key', 'k')
            ->join(
                'Yapeal\Entity\Account\APIKeyInfo',
                'aki'
            )
            ->where('k.keyID = aki.keyID')
            ->andWhere('aki.type = :type')
            ->andWhere('k.active = 1')
            ->setParameter('type', $type);
        return $qb
            ->getQuery()
            ->getResult();
    }
    /**
     * @return array
     */
    public function getActiveCharacterKeyList()
    {
        return $this->getActiveKeyListByType('character');
    }
    /**
     * @return array
     */
    public function getActiveCorporationKeyList()
    {
        return $this->getActiveKeyListByType('corporation');
    }
    /**
     * @return array
     */
    public function getActiveKeyList()
    {
        $qb = $this->_em->createQueryBuilder();
        $qb
            ->select('k')
            ->from('Yapeal\Entity\Registered\Key', 'k')
            ->join(
                'Yapeal\Entity\Account\APIKeyInfo',
                'aki'
            )
            ->where('k.keyID = aki.keyID')
            ->andWhere('k.active = 1');
        return $qb
            ->getQuery()
            ->getResult();
    }
}
